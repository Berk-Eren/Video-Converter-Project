services:
  authentication:
    build:
      context: ./authentication
      dockerfile: Dockerfile
    volumes:
      - ./authentication/:/app/authentication
    command: ["--host", "0.0.0.0", "--port", "8000", "--reload"]
    ports:
      - "8000:8000"
    env_file:
      - ./authentication/.env
    depends_on:
      - mongodb

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    volumes:
      - ./gateway/:/app/gateway
    command: ["--host", "0.0.0.0", "--port", "8001", "--reload"]
    ports:
      - "8001:8001"
    env_file:
      - ./gateway/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
      authentication:
        condition: service_started

  notification:
    build:
      context: ./notification
      dockerfile: Dockerfile
    volumes:
      - ./notification/:/app/notification
    env_file:
      - ./notification/.env
    depends_on:
      rabbitmq:
        condition: service_healthy

  converter:
    build:
      context: ./converter
      dockerfile: Dockerfile
    volumes:
      - ./converter/:/app/converter
    env_file:
      - ./converter/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started

  rabbitmq:
    image: rabbitmq:3-management
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 20s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
